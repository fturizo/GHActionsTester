name: Monitor issues on voting status
on:
  schedule:
#    - cron: "0 10 1 * *"
    - cron: "*/5 * * * *"

jobs:
  select-top-voted-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/checkout@v3
      - name: Select the most voted enhancement
        id: select-top-voted-issue
        uses: actions/github-script@v6
        with:
          script: |
            const script = require('./.github/workflows/scripts/selectMostVotedIssue.js')
            return await script({github, context, core})
#      - uses: neonidian/teams-notify-build-status@v3
#        if: ${{ steps.vote-issues.outputs.result}}
#        with:
#          webhookUrl: ${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}   # Secret name is "TEAMS_INCOMING_WEBHOOK_URL"
#          message: The  Github issue number ${{ steps.vote-issues.outputs.result }} has been selected for voting and thus requires to be escalated.
  close-forgotten-voting-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    needs: select-top-voted-issue
    env:
      maximumVotingThreshold: ${{ vars.MAX_VOTING_THRESHOLD_DAYS }}
    steps:
      - name: Check environment
        run:
          if [ -z $maximumVotingThreshold ]; then
            echo "::error::'FRONT_LINE_USERS_LIST' environment variable is not set"
            exit 1
          fi
      - uses: actions/checkout@v3
        if: success()
      - name: Close "forgotten" enhancement requests
        id: old-vote-issues
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const script = require('./.github/workflows/scripts/closeForgottenEnhancements.js')
            await script({github, context, core, "${ env.maximumVotingThreshold }"})
